---
- hosts: localhost # Used to indicate our playbook will run locally on our dev workstation
  connection: local # Specify that we want to use a local connection, not SSH on WinRM 
  gather_facts: no

  vars: # dict of variables to be used throughout the playbook
    location: eastus2
    rg_name: ansible_workshop
    debug: False # this will be used to control output from our playbook
    vms:
      azvote_vms:
        azvote1:
          nic: azvote1-nic
          avset: azvote-avset
          pip: azvote1-pip

  tasks:
  - name: Create workshop resource group
    register: rg
    azure_rm_resourcegroup:
      name: "{{ rg_name }}"
      location: "{{ location }}"
      state: present

  - name: set identifer
    set_fact:
      identifier: "{{ 99999 | random(start=10000, seed=rg.state.id) }}"

  - debug:
      var: identifier

  - name: create the azure vnet
    azure_rm_virtualnetwork:
      name: "{{ rg_name }}-vnet"
      state: present
      resource_group: "{{ rg_name }}"
      address_prefixes_cidr:
      - 10.13.0.0/16
    register: vnet

  - name: create azvote subnet
    azure_rm_subnet:
      name: azvote-subnet
      resource_group: "{{ rg.state.name }}"
      virtual_network_name: "{{ vnet.state.name }}"
      address_prefix_cidr: 10.13.1.0/24
      state: present
    register: azvote_subnet

  - name: create pip for az vote web front end
    with_dict: "{{ vms.azvote_vms }}"
    azure_rm_publicipaddress:
      name: "{{ item.value.pip }}"
      resource_group: "{{ rg.state.name }}"
      domain_name: "{{ item.key }}-{{ identifier }}"
      state: present
      allocation_method: Dynamic
    register: azvote_pips

  - name: create nsg
    azure_rm_securitygroup:
      resource_group: "{{ rg.state.name }}"
      name: azvote-nsg
      rules:
      - name: allow_ssh
        protocol: Tcp
        destination_port_range: 22
        access: Allow
        priority: 500
        direction: Inbound
      - name: allow_http
        protocol: Tcp
        destination_port_range: 80
        access: Allow
        priority: 400
        direction: Inbound
    register: nsg

  - name: create az vote nics
    azure_rm_networkinterface:
      resource_group: "{{ rg.state.name }}"
      name: "{{ item.value.nic }}"
      subnet_name: "{{ azvote_subnet.state.name }}"
      virtual_network: "{{ vnet.state.name }}"
      security_group: "{{ nsg.state.name }}"
      ip_configurations:
      - name: primary
        primary: yes
        public_ip_address_name: "{{ item.value.pip }}"
    with_dict: "{{ vms.azvote_vms }}"
    register: azvote_nics

  - name: create availability set
    azure_rm_availabilityset:
      name: azvote-avset
      resource_group: "{{ rg.state.name }}"
      sku: Aligned
      platform_fault_domain_count: 2
    register: avset

  - name: create azvote vms
    with_dict: "{{ vms.azvote_vms }}"
    azure_rm_virtualmachine:
      resource_group: "{{ rg.state.name }}"
      name: "{{ item.key }}"
      state: present
      availability_set: "{{ avset.state.name }}"
      network_interface_names:
      - "{{ item.value.nic }}"
      admin_username: azure
      admin_password: P@$$Word123
      vm_size: Standard_DS2_v2
      managed_disk_type: Standard_LRS
      image:
        publisher: Canonical
        offer: UbuntuServer
        sku: 18.04-LTS
        version: latest
      tags:
        voting-app-tier: web

  - name: create redis diag storage account
    azure_rm_storageaccount:
      resource_group: "{{ rg.state.name }}"
      name: "redisdiag{{ identifier }}"
      state: present
      type: Standard_LRS
    register: diagstorage

  # - name: deploy redis cache
  #   azure_rm_deployment:
  #     resource_group_name: "{{ rg.state.name }}"
  #     location: "{{ rg.state.location }}"
  #     parameters:
  #       redisCacheName: 
  #         value: azvote-cache-{{ identifier }}
  #       redisCacheSku:
  #         value: Basic
  #       redisCacheFamily:
  #         value: C
  #       redisCacheCapacity:
  #         value: 0
  #       enableNonSslPort:
  #         value: true
  #       diagnosticsEnabled:
  #         value: false
  #       existingDiagnosticsStorageAccountId:
  #         value: "{{ diagstorage.state.id }}"
  #     template_link: 'https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/101-redis-cache/azuredeploy.json'

  - name: deploy redis cache
    azure_rm_rediscache:
      name: azvote-cache-{{ identifier }}
      enable_non_ssl_port: yes
      location: "{{ rg.state.location }}"
      resource_group: "{{ rg.state.name }}"
      sku:
        name: basic
        size: C0
      state: present

  - debug:
      var: identifier

  - debug:
      msg: "Website URL: http://azvote1-{{ identifier }}.{{ rg.state.location }}.cloudapp.azure.com"
